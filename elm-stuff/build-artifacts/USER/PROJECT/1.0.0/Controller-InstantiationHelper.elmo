Elm.Controller = Elm.Controller || {};
Elm.Controller.InstantiationHelper = Elm.Controller.InstantiationHelper || {};
Elm.Controller.InstantiationHelper.make = function (_elm) {
   "use strict";
   _elm.Controller = _elm.Controller || {};
   _elm.Controller.InstantiationHelper = _elm.Controller.InstantiationHelper || {};
   if (_elm.Controller.InstantiationHelper.values)
   return _elm.Controller.InstantiationHelper.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   _P = _N.Ports.make(_elm),
   $moduleName = "Controller.InstantiationHelper",
   $Basics = Elm.Basics.make(_elm),
   $Dict = Elm.Dict.make(_elm),
   $List = Elm.List.make(_elm),
   $Model$Model = Elm.Model.Model.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var extractInputStatuses = F2(function (gates,
   dict) {
      return function () {
         switch (gates.ctor)
         {case "::":
            switch (gates._1.ctor)
              {case "[]":
                 return _U.eq(gates._0.gateType,
                   $Model$Model.InputGate) ? A3($Dict.insert,
                   gates._0.name,
                   gates._0.status,
                   dict) : dict;}
              return function () {
                 var updatedDict = A2(extractInputStatuses,
                 gates._1,
                 dict);
                 return _U.eq(gates._0.gateType,
                 $Model$Model.InputGate) ? A3($Dict.insert,
                 gates._0.name,
                 gates._0.status,
                 updatedDict) : updatedDict;
              }();
            case "[]": return dict;}
         _U.badCase($moduleName,
         "between lines 83 and 94");
      }();
   });
   var extractCircuitState = F2(function (gates,
   cs) {
      return function () {
         switch (gates.ctor)
         {case "::":
            switch (gates._1.ctor)
              {case "[]":
                 return A3($Dict.insert,
                   gates._0.name,
                   gates._0,
                   cs);}
              return function () {
                 var updatedCS = A2(extractCircuitState,
                 gates._1,
                 cs);
                 return A3($Dict.insert,
                 gates._0.name,
                 gates._0,
                 updatedCS);
              }();
            case "[]": return cs;}
         _U.badCase($moduleName,
         "between lines 71 and 78");
      }();
   });
   var extractNonInputGateNames = function (gates) {
      return function () {
         switch (gates.ctor)
         {case "::":
            switch (gates._1.ctor)
              {case "[]":
                 return _U.eq(gates._0.gateType,
                   $Model$Model.InputGate) ? _L.fromArray([]) : _L.fromArray([gates._0.name]);}
              return _U.eq(gates._0.gateType,
              $Model$Model.InputGate) ? extractNonInputGateNames(gates._1) : A2($List._op["::"],
              gates._0.name,
              extractNonInputGateNames(gates._1));
            case "[]":
            return _L.fromArray([]);}
         _U.badCase($moduleName,
         "between lines 59 and 66");
      }();
   };
   var extractInputGateNames = function (gates) {
      return function () {
         switch (gates.ctor)
         {case "::":
            switch (gates._1.ctor)
              {case "[]":
                 return _U.eq(gates._0.gateType,
                   $Model$Model.InputGate) ? _L.fromArray([gates._0.name]) : _L.fromArray([]);}
              return _U.eq(gates._0.gateType,
              $Model$Model.InputGate) ? A2($List._op["::"],
              gates._0.name,
              extractInputGateNames(gates._1)) : extractInputGateNames(gates._1);
            case "[]":
            return _L.fromArray([]);}
         _U.badCase($moduleName,
         "between lines 47 and 54");
      }();
   };
   var extractGateNames = function (gates) {
      return function () {
         switch (gates.ctor)
         {case "::":
            switch (gates._1.ctor)
              {case "[]":
                 return _L.fromArray([gates._0.name]);}
              return A2($List._op["::"],
              gates._0.name,
              extractGateNames(gates._1));
            case "[]":
            return _L.fromArray([]);}
         _U.badCase($moduleName,
         "between lines 39 and 42");
      }();
   };
   var instantiateGameState = F5(function (gates,
   inputChannelsPreDict,
   solutionDict,
   dir,
   nlink) {
      return {_: {}
             ,circuitState: A2(extractCircuitState,
             gates,
             $Dict.empty)
             ,clicks: 0
             ,completed: false
             ,directions: dir
             ,gameMode: $Model$Model.Schematic
             ,inputChannels: $Dict.fromList(inputChannelsPreDict)
             ,inputNames: extractInputGateNames(gates)
             ,inputStatuses: A2(extractInputStatuses,
             gates,
             $Dict.empty)
             ,mousePos: {ctor: "_Tuple2"
                        ,_0: 0
                        ,_1: 0}
             ,networkNames: extractGateNames(gates)
             ,nextLink: nlink
             ,nonInputNames: extractNonInputGateNames(gates)
             ,solution: solutionDict};
   });
   _elm.Controller.InstantiationHelper.values = {_op: _op
                                                ,instantiateGameState: instantiateGameState
                                                ,extractGateNames: extractGateNames
                                                ,extractInputGateNames: extractInputGateNames
                                                ,extractNonInputGateNames: extractNonInputGateNames
                                                ,extractCircuitState: extractCircuitState
                                                ,extractInputStatuses: extractInputStatuses};
   return _elm.Controller.InstantiationHelper.values;
};