Elm.Model = Elm.Model || {};
Elm.Model.Model = Elm.Model.Model || {};
Elm.Model.Model.make = function (_elm) {
   "use strict";
   _elm.Model = _elm.Model || {};
   _elm.Model.Model = _elm.Model.Model || {};
   if (_elm.Model.Model.values)
   return _elm.Model.Model.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   _P = _N.Ports.make(_elm),
   $moduleName = "Model.Model",
   $Array = Elm.Array.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Dict = Elm.Dict.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var solutionSize = {ctor: "_Tuple2"
                      ,_0: 25
                      ,_1: 25};
   var imgPath = "../assets/img/";
   var inputOnName = A2($Basics._op["++"],
   imgPath,
   "switch-on.png");
   var inputOffName = A2($Basics._op["++"],
   imgPath,
   "switch-off.png");
   var andImageName = A2($Basics._op["++"],
   imgPath,
   "and-schematic-filled.png");
   var orImageName = A2($Basics._op["++"],
   imgPath,
   "or-schematic-filled.png");
   var notImageName = A2($Basics._op["++"],
   imgPath,
   "not-schematic-filled.png");
   var outputOnName = A2($Basics._op["++"],
   imgPath,
   "light-on.png");
   var outputOffName = A2($Basics._op["++"],
   imgPath,
   "light-off.png");
   var outputGoodName = A2($Basics._op["++"],
   imgPath,
   "output-good.png");
   var outputBadName = A2($Basics._op["++"],
   imgPath,
   "output-bad.png");
   var norLogic = F2(function (input1,
   input2) {
      return $Basics.not(input1 || input2);
   });
   var nandLogic = F2(function (input1,
   input2) {
      return $Basics.not(input1 && input2);
   });
   var notLogic = F2(function (input,
   mockInput) {
      return $Basics.not(input);
   });
   var xorLogic = F2(function (input1,
   input2) {
      return A2($Basics.xor,
      input1,
      input2);
   });
   var orLogic = F2(function (input1,
   input2) {
      return input1 || input2;
   });
   var andLogic = F2(function (input1,
   input2) {
      return input1 && input2;
   });
   var outputLogic = F2(function (input,
   mockInput) {
      return input;
   });
   var inputLogic = F2(function (input,
   mockInput) {
      return input;
   });
   var failedChannel = $Signal.channel(false);
   var getGateName = F2(function (index,
   names) {
      return A2($Maybe.withDefault,
      "failedGetGate",
      A2($Array.get,index,names));
   });
   var Gate = function (a) {
      return function (b) {
         return function (c) {
            return function (d) {
               return function (e) {
                  return function (f) {
                     return function (g) {
                        return function (h) {
                           return function (i) {
                              return function (j) {
                                 return {_: {}
                                        ,gateType: b
                                        ,imgName: g
                                        ,imgOffName: i
                                        ,imgOnName: h
                                        ,imgSize: j
                                        ,inputs: d
                                        ,location: f
                                        ,logic: e
                                        ,name: a
                                        ,status: c};
                              };
                           };
                        };
                     };
                  };
               };
            };
         };
      };
   };
   var OutputGate = {ctor: "OutputGate"};
   var NormalGate = {ctor: "NormalGate"};
   var InputGate = {ctor: "InputGate"};
   var failedGetGate = {_: {}
                       ,gateType: InputGate
                       ,imgName: ""
                       ,imgOffName: ""
                       ,imgOnName: ""
                       ,imgSize: {ctor: "_Tuple2"
                                 ,_0: 0
                                 ,_1: 0}
                       ,inputs: $Array.empty
                       ,location: {ctor: "_Tuple2"
                                  ,_0: 0
                                  ,_1: 0}
                       ,logic: inputLogic
                       ,name: "failedGetGate"
                       ,status: false};
   var getGate = F2(function (name,
   state) {
      return A2($Maybe.withDefault,
      failedGetGate,
      A2($Dict.get,name,state));
   });
   var GameState = function (a) {
      return function (b) {
         return function (c) {
            return function (d) {
               return function (e) {
                  return function (f) {
                     return function (g) {
                        return function (h) {
                           return function (i) {
                              return function (j) {
                                 return function (k) {
                                    return function (l) {
                                       return function (m) {
                                          return {_: {}
                                                 ,circuitState: e
                                                 ,clicks: j
                                                 ,completed: k
                                                 ,directions: l
                                                 ,gameMode: f
                                                 ,inputChannels: i
                                                 ,inputNames: b
                                                 ,inputStatuses: h
                                                 ,mousePos: g
                                                 ,networkNames: a
                                                 ,nextLink: m
                                                 ,nonInputNames: c
                                                 ,solution: d};
                                       };
                                    };
                                 };
                              };
                           };
                        };
                     };
                  };
               };
            };
         };
      };
   };
   var Schematic = {ctor: "Schematic"};
   var Game = {ctor: "Game"};
   var UserInput = F3(function (a,
   b,
   c) {
      return {_: {}
             ,inputBools: c
             ,mouseClicks: b
             ,mousePos: a};
   });
   var GameInput = F2(function (a,
   b) {
      return {_: {}
             ,timeDelta: a
             ,userInput: b};
   });
   _elm.Model.Model.values = {_op: _op
                             ,GameInput: GameInput
                             ,UserInput: UserInput
                             ,Game: Game
                             ,Schematic: Schematic
                             ,GameState: GameState
                             ,InputGate: InputGate
                             ,NormalGate: NormalGate
                             ,OutputGate: OutputGate
                             ,Gate: Gate
                             ,getGate: getGate
                             ,failedGetGate: failedGetGate
                             ,getGateName: getGateName
                             ,failedChannel: failedChannel
                             ,inputLogic: inputLogic
                             ,outputLogic: outputLogic
                             ,andLogic: andLogic
                             ,orLogic: orLogic
                             ,xorLogic: xorLogic
                             ,notLogic: notLogic
                             ,nandLogic: nandLogic
                             ,norLogic: norLogic
                             ,imgPath: imgPath
                             ,inputOnName: inputOnName
                             ,inputOffName: inputOffName
                             ,andImageName: andImageName
                             ,orImageName: orImageName
                             ,notImageName: notImageName
                             ,outputOnName: outputOnName
                             ,outputOffName: outputOffName
                             ,outputGoodName: outputGoodName
                             ,outputBadName: outputBadName
                             ,solutionSize: solutionSize};
   return _elm.Model.Model.values;
};