Elm.Level_1 = Elm.Level_1 || {};
Elm.Level_1.make = function (_elm) {
   "use strict";
   _elm.Level_1 = _elm.Level_1 || {};
   if (_elm.Level_1.values)
   return _elm.Level_1.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   _P = _N.Ports.make(_elm),
   $moduleName = "Level_1",
   $Array = Elm.Array.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Controller$Controller = Elm.Controller.Controller.make(_elm),
   $Controller$InstantiationHelper = Elm.Controller.InstantiationHelper.make(_elm),
   $Dict = Elm.Dict.make(_elm),
   $Graphics$Element = Elm.Graphics.Element.make(_elm),
   $Model$Model = Elm.Model.Model.make(_elm),
   $Mouse = Elm.Mouse.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var countClick = A3($Signal.foldp,
   F2(function (clk,count) {
      return count + 1;
   }),
   0,
   $Mouse.clicks);
   var liftToDict = function (bool) {
      return A3($Dict.insert,
      "inputGate",
      bool,
      $Dict.empty);
   };
   var nextLink = "Level_2.html";
   var directions = "This is a NOT gate. It flips inputs. Try to get the output to turn on.";
   var solution = $Dict.fromList(_L.fromArray([{ctor: "_Tuple2"
                                               ,_0: "outputGate"
                                               ,_1: true}]));
   var outputGate = {_: {}
                    ,gateType: $Model$Model.OutputGate
                    ,imgName: $Model$Model.outputOffName
                    ,imgOffName: $Model$Model.outputOffName
                    ,imgOnName: $Model$Model.outputOnName
                    ,imgSize: {ctor: "_Tuple2"
                              ,_0: 75
                              ,_1: 75}
                    ,inputs: $Array.fromList(_L.fromArray(["notGate"]))
                    ,location: {ctor: "_Tuple2"
                               ,_0: 100
                               ,_1: 0}
                    ,logic: $Model$Model.inputLogic
                    ,name: "outputGate"
                    ,status: false};
   var notGate = {_: {}
                 ,gateType: $Model$Model.NormalGate
                 ,imgName: $Model$Model.notImageName
                 ,imgOffName: $Model$Model.notImageName
                 ,imgOnName: $Model$Model.notImageName
                 ,imgSize: {ctor: "_Tuple2"
                           ,_0: 75
                           ,_1: 75}
                 ,inputs: $Array.fromList(_L.fromArray(["inputGate"]))
                 ,location: {ctor: "_Tuple2"
                            ,_0: 0
                            ,_1: 0}
                 ,logic: $Model$Model.notLogic
                 ,name: "notGate"
                 ,status: false};
   var inputGate = {_: {}
                   ,gateType: $Model$Model.InputGate
                   ,imgName: $Model$Model.inputOnName
                   ,imgOffName: $Model$Model.inputOffName
                   ,imgOnName: $Model$Model.inputOnName
                   ,imgSize: {ctor: "_Tuple2"
                             ,_0: 75
                             ,_1: 75}
                   ,inputs: $Array.empty
                   ,location: {ctor: "_Tuple2"
                              ,_0: -100
                              ,_1: 0}
                   ,logic: $Model$Model.inputLogic
                   ,name: "inputGate"
                   ,status: true};
   var gates = _L.fromArray([inputGate
                            ,notGate
                            ,outputGate]);
   var inputChannel = $Signal.channel(inputGate.status);
   var inputSignalsPreDict = _L.fromArray([{ctor: "_Tuple2"
                                           ,_0: "inputGate"
                                           ,_1: inputChannel}]);
   var gameState = A5($Controller$InstantiationHelper.instantiateGameState,
   gates,
   inputSignalsPreDict,
   solution,
   directions,
   nextLink);
   var userInputs = A2($Signal.map,
   liftToDict,
   $Signal.subscribe(inputChannel));
   var userInput = A4($Signal.map3,
   $Model$Model.UserInput,
   $Mouse.position,
   countClick,
   userInputs);
   var main = A2($Controller$Controller.mainDriver,
   gameState,
   userInput);
   _elm.Level_1.values = {_op: _op
                         ,inputGate: inputGate
                         ,notGate: notGate
                         ,outputGate: outputGate
                         ,gates: gates
                         ,inputChannel: inputChannel
                         ,inputSignalsPreDict: inputSignalsPreDict
                         ,solution: solution
                         ,directions: directions
                         ,nextLink: nextLink
                         ,gameState: gameState
                         ,userInputs: userInputs
                         ,liftToDict: liftToDict
                         ,countClick: countClick
                         ,userInput: userInput
                         ,main: main};
   return _elm.Level_1.values;
};