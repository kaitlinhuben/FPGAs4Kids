Elm.View = Elm.View || {};
Elm.View.View = Elm.View.View || {};
Elm.View.View.make = function (_elm) {
   "use strict";
   _elm.View = _elm.View || {};
   _elm.View.View = _elm.View.View || {};
   if (_elm.View.View.values)
   return _elm.View.View.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   _P = _N.Ports.make(_elm),
   $moduleName = "View.View",
   $Array = Elm.Array.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Color = Elm.Color.make(_elm),
   $Dict = Elm.Dict.make(_elm),
   $Graphics$Collage = Elm.Graphics.Collage.make(_elm),
   $Graphics$Element = Elm.Graphics.Element.make(_elm),
   $Graphics$Input = Elm.Graphics.Input.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Html$Attributes = Elm.Html.Attributes.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Model$Model = Elm.Model.Model.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $Text = Elm.Text.make(_elm);
   var drawInputGate = F2(function (name,
   gs) {
      return function () {
         var gateChannel = A2($Maybe.withDefault,
         $Model$Model.failedChannel,
         A2($Dict.get,
         name,
         gs.inputChannels));
         var gate = A2($Model$Model.getGate,
         name,
         gs.circuitState);
         var $ = gate.imgSize,
         w = $._0,
         h = $._1;
         var gateImage = A3($Graphics$Element.image,
         w,
         h,
         gate.imgName);
         var updateValue = _U.eq(gate.status,
         true) ? false : true;
         var gateElement = A2($Graphics$Input.clickable,
         A2($Signal.send,
         gateChannel,
         updateValue),
         gateImage);
         var linkedElement = A2($Graphics$Element.link,
         "#",
         gateElement);
         return A2($Graphics$Collage.move,
         gate.location,
         $Graphics$Collage.toForm(linkedElement));
      }();
   });
   var drawGate = F2(function (name,
   gs) {
      return function () {
         var gate = A2($Model$Model.getGate,
         name,
         gs.circuitState);
         var $ = gate.imgSize,
         w = $._0,
         h = $._1;
         var imgForm = $Graphics$Collage.toForm(A3($Graphics$Element.image,
         w,
         h,
         gate.imgName));
         return A2($Graphics$Collage.move,
         gate.location,
         imgForm);
      }();
   });
   var drawDogLegNet = F3(function (_v0,
   _v1,
   lineColor) {
      return function () {
         switch (_v1.ctor)
         {case "_Tuple2":
            return function () {
                 switch (_v0.ctor)
                 {case "_Tuple2":
                    return function () {
                         var middle = (_v0._0 + _v1._0) / 2;
                         var leg1 = {ctor: "_Tuple2"
                                    ,_0: middle
                                    ,_1: _v0._1};
                         var leg2 = {ctor: "_Tuple2"
                                    ,_0: middle
                                    ,_1: _v1._1};
                         var segment1 = A2($Graphics$Collage.segment,
                         {ctor: "_Tuple2"
                         ,_0: _v0._0
                         ,_1: _v0._1},
                         {ctor: "_Tuple2"
                         ,_0: middle
                         ,_1: _v0._1});
                         var traced1 = A2($Graphics$Collage.traced,
                         $Graphics$Collage.solid(lineColor),
                         segment1);
                         var segment2 = A2($Graphics$Collage.segment,
                         {ctor: "_Tuple2"
                         ,_0: middle
                         ,_1: _v0._1},
                         {ctor: "_Tuple2"
                         ,_0: middle
                         ,_1: _v1._1});
                         var traced2 = A2($Graphics$Collage.traced,
                         $Graphics$Collage.solid(lineColor),
                         segment2);
                         var segment3 = A2($Graphics$Collage.segment,
                         {ctor: "_Tuple2"
                         ,_0: middle
                         ,_1: _v1._1},
                         {ctor: "_Tuple2"
                         ,_0: _v1._0
                         ,_1: _v1._1});
                         var traced3 = A2($Graphics$Collage.traced,
                         $Graphics$Collage.solid(lineColor),
                         segment3);
                         var all = A3($Graphics$Collage.collage,
                         300,
                         300,
                         _L.fromArray([traced1
                                      ,traced2
                                      ,traced3]));
                         return $Graphics$Collage.toForm(all);
                      }();}
                 _U.badCase($moduleName,
                 "between lines 139 and 154");
              }();}
         _U.badCase($moduleName,
         "between lines 139 and 154");
      }();
   });
   var drawStraightNet = F3(function (_v8,
   _v9,
   lineColor) {
      return function () {
         switch (_v9.ctor)
         {case "_Tuple2":
            return function () {
                 switch (_v8.ctor)
                 {case "_Tuple2":
                    return function () {
                         var segment1 = A2($Graphics$Collage.segment,
                         {ctor: "_Tuple2"
                         ,_0: _v8._0
                         ,_1: _v8._1},
                         {ctor: "_Tuple2"
                         ,_0: _v9._0
                         ,_1: _v9._1});
                         return A2($Graphics$Collage.traced,
                         $Graphics$Collage.solid(lineColor),
                         segment1);
                      }();}
                 _U.badCase($moduleName,
                 "between lines 131 and 135");
              }();}
         _U.badCase($moduleName,
         "between lines 131 and 135");
      }();
   });
   var drawSingleNet = F3(function (name,
   index,
   gs) {
      return function () {
         var circuit = gs.circuitState;
         var gate = A2($Model$Model.getGate,
         name,
         circuit);
         var $ = gate.location,
         x = $._0,
         y = $._1;
         var inputName = A2($Model$Model.getGateName,
         index,
         gate.inputs);
         var input1 = A2($Model$Model.getGate,
         inputName,
         circuit);
         var $ = input1.location,
         x1 = $._0,
         y1 = $._1;
         var lineColor = _U.eq(input1.status,
         true) ? $Color.green : $Color.black;
         return _U.eq(y,
         y1) ? A3(drawStraightNet,
         {ctor: "_Tuple2",_0: x,_1: y},
         {ctor: "_Tuple2",_0: x1,_1: y1},
         lineColor) : A3(drawDogLegNet,
         {ctor: "_Tuple2",_0: x,_1: y},
         {ctor: "_Tuple2",_0: x1,_1: y1},
         lineColor);
      }();
   });
   var drawNetsToDouble = F2(function (name,
   gs) {
      return function () {
         var input2segment = A3(drawSingleNet,
         name,
         1,
         gs);
         var input1segment = A3(drawSingleNet,
         name,
         0,
         gs);
         var both = A3($Graphics$Collage.collage,
         300,
         300,
         _L.fromArray([input1segment
                      ,input2segment]));
         return $Graphics$Collage.toForm(both);
      }();
   });
   var drawNetToSingle = F2(function (name,
   gs) {
      return A3(drawSingleNet,
      name,
      0,
      gs);
   });
   var drawNets = F2(function (name,
   gs) {
      return function () {
         var circuit = gs.circuitState;
         var gate = A2($Model$Model.getGate,
         name,
         circuit);
         return _U.eq($Array.length(gate.inputs),
         1) ? A2(drawNetToSingle,
         name,
         gs) : A2(drawNetsToDouble,
         name,
         gs);
      }();
   });
   var drawAll = F3(function (drawSingle,
   names,
   gs) {
      return function () {
         switch (names.ctor)
         {case "::":
            switch (names._1.ctor)
              {case "[]":
                 return _L.fromArray([A2(drawSingle,
                   names._0,
                   gs)]);}
              return function () {
                 var tlForms = A3(drawAll,
                 drawSingle,
                 names._1,
                 gs);
                 var singleForm = A2(drawSingle,
                 names._0,
                 gs);
                 return A2($List._op["::"],
                 singleForm,
                 tlForms);
              }();
            case "[]":
            return _L.fromArray([]);}
         _U.badCase($moduleName,
         "between lines 77 and 85");
      }();
   });
   var drawCircuit = F2(function (_v19,
   gs) {
      return function () {
         switch (_v19.ctor)
         {case "_Tuple2":
            return function () {
                 var otherForms = A3(drawAll,
                 drawGate,
                 gs.nonInputNames,
                 gs);
                 var inputsForms = A3(drawAll,
                 drawInputGate,
                 gs.inputNames,
                 gs);
                 var netsForms = A3(drawAll,
                 drawNets,
                 gs.nonInputNames,
                 gs);
                 var allForms = A2($Basics._op["++"],
                 netsForms,
                 A2($Basics._op["++"],
                 inputsForms,
                 otherForms));
                 return A3($Graphics$Collage.collage,
                 _v19._0,
                 _v19._1,
                 allForms);
              }();}
         _U.badCase($moduleName,
         "between lines 59 and 66");
      }();
   });
   var display = F2(function (_v23,
   gameState) {
      return function () {
         switch (_v23.ctor)
         {case "_Tuple2":
            return function () {
                 var nextBtn = A2($Html.a,
                 _L.fromArray([$Html$Attributes.href(gameState.nextLink)]),
                 _L.fromArray([A2($Html.button,
                 _L.fromArray([$Html$Attributes.id("test-button")]),
                 _L.fromArray([$Html.text("Go to next level")]))]));
                 var levelNextButton = _U.eq(gameState.completed,
                 true) ? A3($Html.toElement,
                 150,
                 20,
                 nextBtn) : $Text.plainText("");
                 var clicksText = $Text.asText(gameState.clicks);
                 var upperBar = A2($Graphics$Element.flow,
                 $Graphics$Element.down,
                 _L.fromArray([$Text.plainText(gameState.directions)
                              ,$Text.plainText("Stats")
                              ,A2($Graphics$Element.flow,
                              $Graphics$Element.right,
                              _L.fromArray([$Text.plainText("Clicks: ")
                                           ,clicksText
                                           ,$Text.plainText("           ")
                                           ,levelNextButton]))]));
                 var circuitHeight = _v23._1 - 50;
                 var circuitWidth = _v23._0;
                 var circuitElement = A2(drawCircuit,
                 {ctor: "_Tuple2"
                 ,_0: circuitWidth
                 ,_1: circuitHeight},
                 gameState);
                 var circuitContainer = A4($Graphics$Element.container,
                 circuitWidth,
                 circuitHeight,
                 $Graphics$Element.middle,
                 circuitElement);
                 return A2($Graphics$Element.flow,
                 $Graphics$Element.down,
                 _L.fromArray([upperBar
                              ,circuitContainer]));
              }();}
         _U.badCase($moduleName,
         "between lines 27 and 52");
      }();
   });
   _elm.View.View.values = {_op: _op
                           ,display: display
                           ,drawCircuit: drawCircuit
                           ,drawAll: drawAll
                           ,drawNets: drawNets
                           ,drawNetToSingle: drawNetToSingle
                           ,drawNetsToDouble: drawNetsToDouble
                           ,drawSingleNet: drawSingleNet
                           ,drawStraightNet: drawStraightNet
                           ,drawDogLegNet: drawDogLegNet
                           ,drawGate: drawGate
                           ,drawInputGate: drawInputGate};
   return _elm.View.View.values;
};